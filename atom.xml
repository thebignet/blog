<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A developer's perspective]]></title>
  <link href="http://thebignet.github.io/blog/atom.xml" rel="self"/>
  <link href="http://thebignet.github.io/blog/"/>
  <updated>2014-05-25T19:17:55+02:00</updated>
  <id>http://thebignet.github.io/blog/</id>
  <author>
    <name><![CDATA[Jean Detoeuf]]></name>
    <email><![CDATA[thebignet@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Giving Your First Talk]]></title>
    <link href="http://thebignet.github.io/blog/blog/2014/05/25/giving-your-first-talk/"/>
    <updated>2014-05-25T17:26:00+02:00</updated>
    <id>http://thebignet.github.io/blog/blog/2014/05/25/giving-your-first-talk</id>
    <content type="html"><![CDATA[<p>Last thursday, I gave my first tech talk.  My company enfavors its employees to share their knowledge through presentations.  The idea had been in my mind for a long time.  I always admired talkers.  Not because of their charisma, but more because they have knowledge and the spend time preparing and have enough confidence to speak in front of their audience.</p>

<h2>Preparation</h2>

<p>I had been preparing my talk for months.  I knew I could get a conference room to present it in.  I needed a time slot too.  Other presenters where ahead of me, but I didn&rsquo;t mind as long as it happened.  I also had to choose wether it would be a lunch presentation or an afterwork one.  I went for the former as it drags more people to it, even though the downside of it that people eat during your talk.</p>

<p>As we were getting closer to the big day, invitations were sent, a Google event was made and I could estimate how many people would come.  It was all very exciting.</p>

<p>But before I could present, I had to make the slides.  I had a subject already.  I&rsquo;d been a big fan of AngularJS and been using it in a couple of projects and got loads of great feedback from it.  My company gave me a Powerpoint template to start with &hellip; yuck !  The graphics in it dated from the 20th century !  With all these funky slides on the web, I had to find something worth it.  Of course Keynote is good too, has great transitions, and it can even record your presentation, but that was probably too easy and not geeky enough.  As I was to present live web page demos, so a web based presentation it would be.  After searching around, I decided to use <a href="http://lab.hakim.se/reveal-js">reveal.js</a>.  Even though it is open-source, <a href="http://slides.com">slides.com</a> hosts presentations using it.</p>

<p>So I prepared my slides, organized them, chopped down some infos, so as not to drown my attendees in words.  Procrastination got the better of me and the last 10% of polish were obsessing me.  Fortunately, I had my wife and <a href="https://github.com/madbrain">@madbrain</a> to reread the slides.  I practiced several times throughout the presentation.  Trust me, this is mandatory.  You might think &ldquo;I know this, I&rsquo;ll have no problem talking about it&rdquo;.  Believe me, once you start with no audience, you realize a bit of practice is necessary.  Imagine with the audience and pressure.</p>

<h2>Giving the talk</h2>

<p>So the big day came.  After some problems with the overhead projector, I got things started.  I have to say it went better than I expected.  The audience was receptive.  I had a survey in the first slides to get interaction and sometimes polled the audience.  The talk was fine all in all.</p>

<p>The demos however, didn&rsquo;t work.  I could not get them to work.  At first I thought that the lack of internet was to blame.  But I had prepared so that the actual demo would reference a local copy of AngularJS while the slide showed that it references a CDN.  I had cloned the repository on my laptop, but in order to get a local copy of AngularJS, I had to run <code>bower install</code> for bower dependencies to be retrieved.</p>

<p>I didn&rsquo;t resolve this during the presentation in order to get things going.  I now commited those dependencies to my repo in order to avoid that and have a working copy right after clone.  This can lead to a divergence between the bower.json and the actual dependencies on the repository, but I guess it&rsquo;s a lesser evil.</p>

<p>I really have to hand it to Zach Holman for his great advice on <a href="http://speaking.io">speaking.io</a>.  It really helped me concentrate on what&rsquo;s important for a talk and what&rsquo;s not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frameworks Are What Drive Languages]]></title>
    <link href="http://thebignet.github.io/blog/blog/2014/05/25/technologies-and-frameworks/"/>
    <updated>2014-05-25T16:30:08+02:00</updated>
    <id>http://thebignet.github.io/blog/blog/2014/05/25/technologies-and-frameworks</id>
    <content type="html"><![CDATA[<p>Recent javascript frameworks are great.  They allow you to do many things simply.  Such things are recent but so useful like two-way data-binding or REST resources.  These concepts have become so essential that one could argue they could be part of the original language.  This is what is suggested in <a href="http://www.html5rocks.com/en/tutorials/es7/observe/">Data-binding Revolutions with Object.observe()</a>.</p>

<p>After all, frameworks are nothing but temporary extensions of a language.  Same goes for Spring in the Java ecosystem.  For example, Spring Batch became so popular that a JSR was made to standardize batch functionnality for Java.  See <a href="https://java.net/projects/jbatch/sources/jsr-352-git-repository/show">JSR 352</a> and <a href="http://spring.io/blog/2014/02/03/jsr-352-spring-batch-and-you">JSR 352 Spring Batch And You</a> for more details.</p>

<p>The annoying thing about frameworks is that they take you prisonner.  It&rsquo;s often not possible to use multiple frameworks for the same part of a stack.  This is why standardization is a good thing.  It allows one to use a standard regardless of implementation.  This is great for switching technologies.</p>

<p>One shouldn&rsquo;t avoid frameworks.  Frameworks are great and the more people use a framework, the closer it gets towards standardisation, the holy grail, the one-standard-to-rule-them-all kind of conquest.  But sometimes, it&rsquo;s only the concept which is retained.  This is what happened for Java 8.  Closures existed already in many languages, even for the JVM.  Such is the case for Scala and Groovy.  Sure it was possible in Java with inner classes.  Anonymous classes are a simple and widely used concept and now Java has a simpler notation for these.</p>

<p>Frameworks push languages forward.  They are the beta testers of new functionnalities.  The ones who succeed become part of the language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Battle of Modern Javascript Frameworks]]></title>
    <link href="http://thebignet.github.io/blog/blog/2014/04/22/angularjs/"/>
    <updated>2014-04-22T18:52:52+02:00</updated>
    <id>http://thebignet.github.io/blog/blog/2014/04/22/angularjs</id>
    <content type="html"><![CDATA[<p>In 2012 I started looking at the effusion of JS frameworks, amongst which three cought my attention :</p>

<ul>
<li><a href="http://backbonejs.org/">Backbone.js</a></li>
<li><a href="http://knockoutjs.com/">Knockout.js</a></li>
<li><a href="angularjs.org">AngularJS</a></li>
</ul>


<p>At that time, <strong>AngularJS</strong> was still emerging compared to Backbone, which was used in production and had all the attention.  Backbone is simple, so simple that its code serves as documentation.  This seems like a good thing, but the purpose of a framework is not to be designed simply, but to be simple to use.  That&rsquo;s what Knockout.js and AngularJS are.  But between the two, Knockout.js is too limited.  It does very well with data binding and templating, but doesn&rsquo;t have advanced features that made the popularity of AngularJS such as dependency injection, services, directives, animations &hellip;</p>

<p>AngularJS is my prefered choice for future web applications.  It does wonders with a backend thanks to its REST API.  For me there&rsquo;s no need to have server-side rendering as AngularJS can take care of it and make use of services to communicate to the server.</p>

<h2>Comparison between frameworks</h2>

<p>The following characteristics are not meant to be exhaustive, but are of prime order to me regarding JavaScript frameworks.</p>

<table>
<thead>
<tr>
<th>Characteristic </th>
<th align="center"> AngularJS </th>
<th align="center"> Backbone.js </th>
<th align="center"> Knockout</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ease of learning </td>
<td align="center"> 3 </td>
<td align="center"> 2 </td>
<td align="center"> 1</td>
</tr>
<tr>
<td>Documentation </td>
<td align="center"> 1 </td>
<td align="center"> 2 </td>
<td align="center"> 3</td>
</tr>
<tr>
<td>Community </td>
<td align="center"> 1 </td>
<td align="center"> 2 </td>
<td align="center"> 3</td>
</tr>
<tr>
<td><a href="http://www.google.com/trends/explore?hl=en-US#q=Angularjs%2C%20Backbone.js%2C%20Knockout.js&amp;date=today%2012-m&amp;cmpt=q">Number of users</a> </td>
<td align="center"> 1 </td>
<td align="center"> 2 </td>
<td align="center"> 3</td>
</tr>
<tr>
<td>Testing </td>
<td align="center"> <i class="fa fa-check"></i> </td>
<td align="center"> <i class="fa fa-check"></i> </td>
<td align="center"> <i class="fa fa-check"></i></td>
</tr>
<tr>
<td>Dependency injection </td>
<td align="center"> <i class="fa fa-check"></i> </td>
<td align="center"> <i class="fa fa-check"></i> </td>
<td align="center"> </td>
</tr>
<tr>
<td>Flexibility (1) </td>
<td align="center"> 3 </td>
<td align="center"> 1 </td>
<td align="center"> 2</td>
</tr>
<tr>
<td>Convention </td>
<td align="center"> 1 </td>
<td align="center"> 3 </td>
<td align="center"> 2</td>
</tr>
<tr>
<td><strong>One</strong> way data binding </td>
<td align="center"> <i class="fa fa-check"></i> </td>
<td align="center"> with epoxy.js </td>
<td align="center"> <i class="fa fa-check"></i></td>
</tr>
<tr>
<td><strong>Two</strong> way data binding </td>
<td align="center"> <i class="fa fa-check"></i> </td>
<td align="center"> with epoxy.js </td>
<td align="center"> <i class="fa fa-check"></i></td>
</tr>
<tr>
<td>Level of separation from DOM </td>
<td align="center"> 1 </td>
<td align="center"> 3 </td>
<td align="center"> 2</td>
</tr>
<tr>
<td>Extendability </td>
<td align="center"> 1 </td>
<td align="center"> 2 </td>
<td align="center"> 3</td>
</tr>
</tbody>
</table>


<p>Ordering is from best to last</p>

<p>(1) AngularJS is noted as less flexible, but that is because it follows conventions.  This is what makes it more efficient than other frameworks.  The structure and convention is set, leaving way for the app&rsquo;s code.  There&rsquo;s no need to reinvent the wheel, nor to ensure certain standards that one has to maintain between developers.</p>

<p>AngularJS is great for medium to large projects if you follow simple conventions.  There&rsquo;s just no bending the model as you would in Backbone and Knockout.  But overall, it&rsquo;s for the best.  Here&rsquo;s how it&rsquo;s meant to be used :</p>

<p>Service : Connectors to external APIs
Directive : Allows to modify DOM through the use of tags or attributes and bind to scope
View : DOM
Controller : Glue between Scope and other components like Services//Directives</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Pull Request]]></title>
    <link href="http://thebignet.github.io/blog/blog/2014/04/12/first-pull-request/"/>
    <updated>2014-04-12T16:57:46+02:00</updated>
    <id>http://thebignet.github.io/blog/blog/2014/04/12/first-pull-request</id>
    <content type="html"><![CDATA[<p>Well, it isn&rsquo;t really my first pull request.  I&rsquo;ve done pull request on friend&rsquo;s projects on GitHub or even on GitLab working in corporate environment.  This was really my first pull request on an open source project.  Ever since I saw Zack Holman&rsquo;s <a href="http://zachholman.com/talk/product-is-the-byproduct/">presentation</a> at Mix-It 2013 I knew I had to be a part of it.  And there I am contributing to Pivotal&rsquo;s <a href="http://projects.spring.io/spring-boot/">Spring Boot</a> project.</p>

<p>I made this change because I was using Spring Boot for a corporate project.  The bootstrapping made it really easy to build, the convention over configuration aspect had the advantage of reducing the amount of overhead code to get the app up and running.  But maybe the convention wasn&rsquo;t fully what I needed.  Spring Boot 1.0.0.RELEASE had support for ActiveMQ, which worked great, but in my company, where the queuing system was relatively new, they decided to secure it by adding credentials.  Unfortunatly, Spring Boot did not provide out-of-the-box support for credentials.</p>

<p>Adding this functionality was terribly easy (35 lines added and 4 removed).  I had modified the Spring Boot project I had cloned and builded it and deployed it as SNAPSHOT on my local repository.  Everything worked on first try.  As this is a common feature I guessed I wouldn&rsquo;t be the first and last to want it.  I commited this feature on a new branch on my GitHub fork and made a <a href="https://github.com/spring-projects/spring-boot/pull/618">pull request</a>.</p>

<p>The Spring Boot team was really quick as to check the pull request and accepted it after my signing Pivotal&rsquo;s legal papers.  It got integrated into Spring Boot 1.0.1.RELEASE.</p>

<p>This may seem as not a big deal to many readers, but I&rsquo;m sure you had the same excitement on your first major pull request.</p>

<p>I am now a part of the open source community.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Created My Blog]]></title>
    <link href="http://thebignet.github.io/blog/blog/2014/04/12/created-my-blog/"/>
    <updated>2014-04-12T11:58:45+02:00</updated>
    <id>http://thebignet.github.io/blog/blog/2014/04/12/created-my-blog</id>
    <content type="html"><![CDATA[<p>My name is Jean Detoeuf.  I live in Lyon and I&rsquo;m a software developer.  I spent the last few years learning to code and have gotten quite good at it.  Can&rsquo;t say I&rsquo;m a genius, but I get my way around a few design patterns.  I can&rsquo;t remember their names, but that&rsquo;s not really the point of design patterns.  They&rsquo;re meant as good practice for programmers.</p>

<p>This blog will be about the Java ecosystem, Agility, and the software industry.  Hope you&rsquo;ll enjoy reading it.  I&rsquo;ll be linking a lot of things I find useful and sometimes be posting solutions to problems I&rsquo;ve come accross that weren&rsquo;t already on the web.</p>
]]></content>
  </entry>
  
</feed>
